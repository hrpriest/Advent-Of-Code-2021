fn main() {
    let input = vec![
        0b010011001001,
        0b110101011110,
        0b111111000101,
        0b100111111001,
        0b000000011111,
        0b111100100111,
        0b011111100000,
        0b001001011100,
        0b101100111011,
        0b010001010100,
        0b111011001010,
        0b010001100011,
        0b110110011011,
        0b011011000001,
        0b001100101100,
        0b001000101100,
        0b100000001010,
        0b001111110000,
        0b100101000000,
        0b010000100000,
        0b010100110000,
        0b110000111101,
        0b000001011010,
        0b000011011001,
        0b011000101110,
        0b100011100101,
        0b110010010100,
        0b001110110101,
        0b100011000000,
        0b110100111100,
        0b100100001111,
        0b010110011001,
        0b000001111101,
        0b100001000010,
        0b110010101110,
        0b000101001100,
        0b100100010010,
        0b111111101000,
        0b001010111001,
        0b100101000001,
        0b001101101110,
        0b101100011010,
        0b100100011100,
        0b111100000111,
        0b101011000100,
        0b110000101010,
        0b101100111010,
        0b101100010101,
        0b001011111101,
        0b011010000110,
        0b001101000011,
        0b110001001110,
        0b011010101111,
        0b001111111011,
        0b001100100001,
        0b111010110001,
        0b011011111100,
        0b001011111001,
        0b111110111110,
        0b011111001011,
        0b110110011101,
        0b111110011011,
        0b101101010010,
        0b110111011110,
        0b111011110100,
        0b111110001011,
        0b110100000010,
        0b000011111001,
        0b100001001111,
        0b101110101010,
        0b000111111011,
        0b011110110001,
        0b000011110110,
        0b011101001011,
        0b010011001110,
        0b101110011110,
        0b110101010011,
        0b111010100011,
        0b010101011001,
        0b011011010101,
        0b000010110100,
        0b010011001000,
        0b110000010010,
        0b101111111001,
        0b000100111011,
        0b011101010101,
        0b100011101111,
        0b001010110100,
        0b101101000110,
        0b011100111011,
        0b000100010111,
        0b010111100000,
        0b100100111110,
        0b110110001111,
        0b010010010111,
        0b001000001110,
        0b001110000101,
        0b001111101100,
        0b101100111110,
        0b111011010111,
        0b110110111000,
        0b000111110001,
        0b111001101001,
        0b011111001000,
        0b001110100011,
        0b111100100010,
        0b010111101000,
        0b111100110101,
        0b111100111010,
        0b010100110110,
        0b100101111100,
        0b101000011000,
        0b011011111111,
        0b010000111100,
        0b101111000000,
        0b100001011000,
        0b110010010110,
        0b111000011011,
        0b010100110111,
        0b100100110011,
        0b000010011101,
        0b010001100111,
        0b011000110011,
        0b100101001101,
        0b110111011011,
        0b000100001000,
        0b011111100101,
        0b110110111100,
        0b100010010100,
        0b110110110111,
        0b111000111011,
        0b101101111000,
        0b000000110110,
        0b101111111010,
        0b000110000001,
        0b011111000110,
        0b110010100111,
        0b111010101111,
        0b101011000010,
        0b011001010111,
        0b010100111110,
        0b110001111000,
        0b110101101111,
        0b011001000110,
        0b111000111111,
        0b010100100111,
        0b100001100001,
        0b110101011010,
        0b000110111000,
        0b101101001010,
        0b010110100110,
        0b111101101010,
        0b110100011111,
        0b101010010000,
        0b001100001001,
        0b001000000101,
        0b111000010001,
        0b100100101100,
        0b001111100011,
        0b110110010000,
        0b011010111010,
        0b011001110110,
        0b000000100111,
        0b011110111100,
        0b011101000101,
        0b011000111010,
        0b110110100011,
        0b101110101000,
        0b111001111001,
        0b010001000001,
        0b111000111100,
        0b001011101011,
        0b110111111111,
        0b010111011101,
        0b110010001010,
        0b011111000100,
        0b011001100110,
        0b011100000010,
        0b000101100010,
        0b000111111010,
        0b000000010101,
        0b010011110110,
        0b000111111101,
        0b101101000010,
        0b101111010001,
        0b011110001101,
        0b100000000111,
        0b110111111110,
        0b000010011110,
        0b111000010010,
        0b110011110011,
        0b101101101011,
        0b011011101110,
        0b101011011000,
        0b000101101001,
        0b010110100011,
        0b011001100111,
        0b011101000011,
        0b001110010110,
        0b001001010010,
        0b111110101001,
        0b001111001001,
        0b010101001111,
        0b100111100001,
        0b011100010101,
        0b100001110011,
        0b010001110001,
        0b101011010101,
        0b000100000110,
        0b100101110001,
        0b100101110010,
        0b111011011001,
        0b100110101101,
        0b101100110001,
        0b101111100101,
        0b001010000000,
        0b011000100011,
        0b010010001111,
        0b011100011101,
        0b001100110010,
        0b000001011111,
        0b101111000011,
        0b111000111110,
        0b011111100100,
        0b100110000000,
        0b011110110100,
        0b001100101011,
        0b110010101010,
        0b010011100100,
        0b011000010100,
        0b001101100101,
        0b101010101000,
        0b011110011010,
        0b010010001100,
        0b010100010001,
        0b010001011011,
        0b110010011001,
        0b010111000101,
        0b111011010110,
        0b111010111100,
        0b011111101000,
        0b100110010100,
        0b010101011011,
        0b010111001011,
        0b011110010011,
        0b011000011110,
        0b100001000111,
        0b000011111101,
        0b111100101001,
        0b000000100011,
        0b110011100100,
        0b101111100001,
        0b010011110111,
        0b101000001011,
        0b001101111001,
        0b100111000011,
        0b000001000100,
        0b100100010000,
        0b000010010100,
        0b000111111001,
        0b000100100010,
        0b011011011111,
        0b010110011110,
        0b001101010011,
        0b110111101001,
        0b111011101111,
        0b100110000100,
        0b001101110111,
        0b010101101110,
        0b011010100011,
        0b010010100101,
        0b101110110110,
        0b111000001011,
        0b010001101000,
        0b111101100110,
        0b100111010001,
        0b100010011010,
        0b101111001000,
        0b011000100000,
        0b111000010101,
        0b100101011001,
        0b011011110011,
        0b110011001010,
        0b000110010111,
        0b101000010011,
        0b100100111100,
        0b001111000001,
        0b001110101101,
        0b100111100011,
        0b011001011101,
        0b111000000000,
        0b101001010011,
        0b000000111101,
        0b000011000000,
        0b001011000100,
        0b011111111011,
        0b000111101111,
        0b101100011000,
        0b111011000001,
        0b101000000111,
        0b111110000100,
        0b101001110100,
        0b010111000001,
        0b010010101001,
        0b110011001111,
        0b100010000010,
        0b001001001010,
        0b100110010110,
        0b101100110010,
        0b111000111010,
        0b101110011111,
        0b110111111001,
        0b011010110011,
        0b111010100010,
        0b110000011000,
        0b011000101011,
        0b001001000001,
        0b000100110010,
        0b111100000000,
        0b001010100101,
        0b101011010110,
        0b110001010100,
        0b101111010000,
        0b000110000000,
        0b111110011000,
        0b110011110111,
        0b011010111001,
        0b001100110110,
        0b111111111101,
        0b001010010001,
        0b101001111000,
        0b000100110101,
        0b000100111111,
        0b100000110111,
        0b001011100001,
        0b001010111000,
        0b100010101100,
        0b110110000111,
        0b100101010010,
        0b101001001010,
        0b110000011101,
        0b111010010101,
        0b001011011000,
        0b101101101001,
        0b010101111011,
        0b101010011100,
        0b000010000011,
        0b001110110110,
        0b111100001111,
        0b011000000001,
        0b000000111010,
        0b000110011110,
        0b010100110010,
        0b000111010000,
        0b110111110111,
        0b110000000101,
        0b011111111111,
        0b010101000011,
        0b110000101000,
        0b000001110001,
        0b010001010010,
        0b100100010110,
        0b000100101110,
        0b100011011000,
        0b000110010001,
        0b100000001001,
        0b011010010001,
        0b010111101011,
        0b101101101100,
        0b001101100001,
        0b010101111101,
        0b001010101110,
        0b001110001001,
        0b100101110110,
        0b001000110011,
        0b010001011110,
        0b100110011001,
        0b010100101110,
        0b101101111011,
        0b001110110011,
        0b000111001111,
        0b100100110110,
        0b101000111101,
        0b100000111100,
        0b111000101100,
        0b000010010011,
        0b001100001101,
        0b111101011011,
        0b001100101010,
        0b001000010001,
        0b011001010010,
        0b111011101011,
        0b010010001101,
        0b000100100011,
        0b111110001111,
        0b110010001111,
        0b010001100010,
        0b101101110001,
        0b101100110011,
        0b110111111011,
        0b011011010100,
        0b011101100101,
        0b111111000100,
        0b101111001001,
        0b010000000100,
        0b011001111110,
        0b110101111100,
        0b111111100001,
        0b111011000100,
        0b100110100001,
        0b101001110000,
        0b001011010010,
        0b011010001000,
        0b110010001110,
        0b000101111001,
        0b010100100110,
        0b011100110100,
        0b000011111000,
        0b100100000111,
        0b110111001000,
        0b111100001110,
        0b001010101100,
        0b010111111011,
        0b111010100100,
        0b101000011101,
        0b110111100110,
        0b111100110100,
        0b000010011010,
        0b000110101111,
        0b001101010001,
        0b010010000111,
        0b011000100001,
        0b110111100100,
        0b010011100101,
        0b011001001011,
        0b101101010100,
        0b010000010001,
        0b001001110001,
        0b100010000110,
        0b111101111011,
        0b011110100101,
        0b000101001000,
        0b111110011100,
        0b000001101110,
        0b111101000001,
        0b100111000100,
        0b011110100011,
        0b110000101011,
        0b000010011111,
        0b000101011001,
        0b101100111001,
        0b011010000111,
        0b000010001011,
        0b010001111110,
        0b000010111110,
        0b101001111110,
        0b000110001101,
        0b001100101001,
        0b000101111011,
        0b110000100110,
        0b110001000011,
        0b000001111100,
        0b010100111010,
        0b011001000001,
        0b110111000010,
        0b110011101010,
        0b001101101000,
        0b100110100011,
        0b000010101010,
        0b101101111010,
        0b111111100111,
        0b010101000000,
        0b011010011110,
        0b011110100100,
        0b100000110000,
        0b011111011100,
        0b011000001110,
        0b000010000010,
        0b101011010010,
        0b010101110000,
        0b110001000000,
        0b011111111100,
        0b101110110010,
        0b111111011001,
        0b100000110110,
        0b111010100111,
        0b000001100101,
        0b101010010111,
        0b010000110110,
        0b001000010111,
        0b101000100000,
        0b100101000011,
        0b111100011011,
        0b010110001101,
        0b101010100110,
        0b101111111101,
        0b100000111001,
        0b011100001000,
        0b110111011000,
        0b100011101101,
        0b101101110011,
        0b000010101100,
        0b000011000001,
        0b011110110110,
        0b001100011110,
        0b010100111111,
        0b011111101011,
        0b000011110100,
        0b001000100111,
        0b010000000101,
        0b111001111000,
        0b111001010001,
        0b001100000001,
        0b110110111010,
        0b101000011010,
        0b010100111001,
        0b000100111100,
        0b110000100011,
        0b100000101011,
        0b001001001110,
        0b101110111101,
        0b110101001110,
        0b101110110100,
        0b001111110101,
        0b100000010101,
        0b110000011010,
        0b111101100011,
        0b101001100100,
        0b100010100001,
        0b011001010000,
        0b111001110000,
        0b101000100111,
        0b100111011110,
        0b000000101111,
        0b101000110000,
        0b110100001111,
        0b001101101010,
        0b010011001101,
        0b000110011101,
        0b101011110000,
        0b100010011110,
        0b101010100011,
        0b000110111011,
        0b000101110110,
        0b001000000011,
        0b011011111010,
        0b101011101111,
        0b000011010101,
        0b010001011101,
        0b001010011100,
        0b011111111000,
        0b111011100111,
        0b010111010001,
        0b010111101001,
        0b101000110100,
        0b000001010000,
        0b010001000101,
        0b000010111101,
        0b010101101111,
        0b010100001010,
        0b100010011101,
        0b011111011001,
        0b111010001001,
        0b000110011011,
        0b000001001000,
        0b100011011111,
        0b110001011000,
        0b001101011000,
        0b000010001101,
        0b100100101111,
        0b110101111011,
        0b000010010110,
        0b001110011010,
        0b100110101000,
        0b100101101100,
        0b110011101101,
        0b000011011011,
        0b110110010110,
        0b001111011110,
        0b100111010100,
        0b011001000000,
        0b011011100001,
        0b101100111000,
        0b010001000011,
        0b010110010110,
        0b101010110100,
        0b101011100100,
        0b110001110101,
        0b110110001100,
        0b000100011011,
        0b110100010000,
        0b101010110001,
        0b110010111000,
        0b110011100101,
        0b010000100100,
        0b101100000011,
        0b111101111101,
        0b000100001100,
        0b000000101011,
        0b101101100000,
        0b000111000110,
        0b010100001000,
        0b011110100001,
        0b101101110010,
        0b110010001101,
        0b011100001001,
        0b001100111111,
        0b000011011010,
        0b001110011110,
        0b000010011000,
        0b111001100010,
        0b110100010001,
        0b100001000100,
        0b000110100000,
        0b111011110111,
        0b001011110000,
        0b000001100010,
        0b001000110001,
        0b110001000010,
        0b010100000011,
        0b010110001111,
        0b100111001001,
        0b011100011011,
        0b011101101111,
        0b110000101100,
        0b101111011111,
        0b101111000110,
        0b111001101011,
        0b011011101111,
        0b010110010101,
        0b100001001100,
        0b011101110011,
        0b000001100001,
        0b001000110111,
        0b011000110001,
        0b111000000111,
        0b000100101001,
        0b101100101101,
        0b000100010110,
        0b110010101001,
        0b100110011100,
        0b000111010011,
        0b110100000100,
        0b101011001110,
        0b010011110001,
        0b010110110100,
        0b111111001000,
        0b010100101111,
        0b101111101000,
        0b011110101000,
        0b001011111000,
        0b111110010111,
        0b101101010000,
        0b111111010100,
        0b100111010011,
        0b011101010011,
        0b100000111110,
        0b100010111111,
        0b011011100010,
        0b111000011101,
        0b010100001101,
        0b010100001011,
        0b001111101001,
        0b011001111100,
        0b111101000111,
        0b000100000000,
        0b110101111001,
        0b111010011111,
        0b010010011101,
        0b001101101011,
        0b110111101111,
        0b001000111001,
        0b100010110000,
        0b000000000101,
        0b101001000001,
        0b001110001101,
        0b110111001101,
        0b111010101110,
        0b101001000110,
        0b000011100011,
        0b010101001101,
        0b000111000001,
        0b001011011101,
        0b111100011101,
        0b111101000110,
        0b101101001011,
        0b101110010101,
        0b110100111000,
        0b000010101101,
        0b000110000110,
        0b100001110001,
        0b011010010000,
        0b110000011111,
        0b101011011110,
        0b000010001111,
        0b100001100101,
        0b111010000001,
        0b010010001011,
        0b011111110100,
        0b000001010010,
        0b110010010111,
        0b011000001000,
        0b011101010100,
        0b111110111101,
        0b111100010100,
        0b001101111000,
        0b011110000001,
        0b111011111001,
        0b111011011011,
        0b001010010011,
        0b011011001110,
        0b101101111111,
        0b001101011001,
        0b010111001000,
        0b101110001011,
        0b111101100111,
        0b001101110010,
        0b100001100110,
        0b010100010100,
        0b110010111011,
        0b110011110110,
        0b010110011101,
        0b101101011001,
        0b001111110011,
        0b100000001100,
        0b110010000000,
        0b001011001100,
        0b001111111100,
        0b110010100101,
        0b100000101100,
        0b011000101101,
        0b000101000010,
        0b100100110001,
        0b010111111110,
        0b101111110100,
        0b100001101011,
        0b111010100001,
        0b100111101010,
        0b100110110000,
        0b000101011000,
        0b100011110011,
        0b110100101101,
        0b010011011011,
        0b011010000001,
        0b010000100001,
        0b001101111110,
        0b110000000010,
        0b011010000000,
        0b100110111001,
        0b101011000011,
        0b100101010101,
        0b001100110111,
        0b001111011001,
        0b110000110100,
        0b111101000000,
        0b110101010100,
        0b011100110111,
        0b001100100000,
        0b111110010110,
        0b101010111010,
        0b110100011010,
        0b110010010010,
        0b101000101101,
        0b111110010010,
        0b100111001000,
        0b110000101110,
        0b100001101110,
        0b100011010110,
        0b000101000001,
        0b000010110111,
        0b000110000100,
        0b011101110101,
        0b111100011010,
        0b000000010100,
        0b111100011000,
        0b110110101011,
        0b001100010101,
        0b000010010010,
        0b010100110001,
        0b001001010110,
        0b100110000011,
        0b110100100001,
        0b000111110010,
        0b011000011011,
        0b111101001000,
        0b001101110101,
        0b001101110110,
        0b010101101010,
        0b110111000011,
        0b011110000010,
        0b011010011011,
        0b111100110001,
        0b010001001000,
        0b000101100110,
        0b010001110111,
        0b010000101000,
        0b000000100000,
        0b100011001011,
        0b100001111110,
        0b100011111101,
        0b101101001110,
        0b101110110011,
        0b100000011111,
        0b001101010111,
        0b111101100000,
        0b011010001111,
        0b101001010010,
        0b100010100000,
        0b011000100111,
        0b101100100000,
        0b011011000011,
        0b001101001011,
        0b001010001011,
        0b110100000001,
        0b111110001000,
        0b101000010101,
        0b100011000010,
        0b010110101000,
        0b011101011111,
        0b000110001000,
        0b101100000111,
        0b110100101001,
        0b101001101001,
        0b010111000011,
        0b011101000001,
        0b101011001000,
        0b110101001101,
        0b010010100110,
        0b111001110011,
        0b010111010010,
        0b010011101100,
        0b001110111100,
        0b010111011110,
        0b000010001100,
        0b111000001001,
        0b001100101110,
        0b111001100011,
        0b010000011001,
        0b111010111111,
        0b010011111111,
        0b011100100110,
        0b001001101111,
        0b001000111110,
        0b010101111000,
        0b011011001011,
        0b101110001100,
        0b010100010010,
        0b000001011011,
        0b000001100100,
        0b000000010011,
        0b000001110011,
        0b010101001000,
        0b110110100001,
        0b001101101101,
        0b011010001110,
        0b101011100110,
        0b110001100101,
        0b110100100110,
        0b101010110000,
        0b110100110101,
        0b011101000100,
        0b101110001010,
        0b001100110101,
        0b000100011110,
        0b101110111001,
        0b011111101010,
        0b010110001010,
        0b110111110010,
        0b001000101110,
        0b100011001100,
        0b010011010101,
        0b100101001001,
        0b111011001110,
        0b101100000100,
        0b000010111100,
        0b111000101111,
        0b010001001100,
        0b010011110100,
        0b010010110000,
        0b001111101110,
        0b111110110111,
        0b101010000010,
        0b010001101101,
        0b111001000000,
        0b100011001010,
        0b100000111111,
        0b110000001101,
        0b000000111110,
        0b010011100111,
        0b010110110010,
        0b010110010000,
        0b011010001001,
        0b101000110101,
        0b111110001010,
        0b100101001010,
        0b011000001001,
        0b011100010111,
        0b111010111000,
        0b011011001100,
        0b001010000100,
        0b011100001110,
        0b001001110010,
        0b110001000110,
        0b100100010111,
        0b101110001101,
        0b000100001001,
        0b001001011111,
        0b100111100100,
        0b100001100011,
        0b000011011110,
        0b101011111110,
        0b111000011000,
        0b000100001010,
        0b011111010111,
        0b011001010100,
        0b011101110111,
        0b001100000110,
        0b100011011101,
        0b011010111111,
        0b010110100111,
        0b011000111001,
        0b000100111010,
        0b011001001110,
        0b111010001000,
        0b110011000101,
        0b110001101010,
        0b001101100111,
        0b101011101010,
        0b000001001010,
        0b110110010100,
        0b100000000001,
        0b000011011101,
        0b010011101110,
        0b101001100110,
        0b111110011001,
        0b110010100000,
        0b100011000100,
        0b111111000001,
        0b010000100011,
        0b000100010010,
        0b010111000010,
        0b011111101001,
        0b101101100100,
        0b011011000101,
        0b111110010000,
        0b001000000000,
        0b011000001011,
        0b111111110110,
        0b011010110110,
        0b000001111110,
        0b011101001000,
        0b110101010000,
        0b110001010000,
        0b101000100001,
        0b111100001001,
        0b000000000110,
        0b100000011101,
        0b101001011011,
        0b000001001100,
        0b110000010110,
        0b110000001011,
        0b000101101101,
        0b001011000111,
        0b100110011111,
        0b011111011101,
        0b110010101111,
        0b000000000001,
        0b000101110001,
        0b100011000001,
        0b100101010011,
        0b100011010111,
        0b001101100000,
        0b001100111110,
        0b100101000111,
        0b100011110111,
        0b100000110011,
        0b111010000101,
        0b010101110110,
        0b101010001011,
        0b011001100100,
        0b111101110011,
        0b110011000001,
        0b111011101100,
        0b110010011010,
        0b111100010011,
        0b001011011001,
        0b000000000000,
        0b001000001101,
        0b001110010001,
        0b000011010100,
        0b100001010101,
        0b101010001000,
        0b110100011011,
        0b011100111000,
        0b111111111001,
        0b100101001110,
        0b100011100011,
        0b101000101000,
        0b010101110101,
        0b011100011100,
    ];

    let weird: Vec<u16> = vec![
        0b00100,
        0b11110,
        0b10110,
        0b10111,
        0b10101,
        0b01111,
        0b00111,
        0b11100,
        0b10000,
        0b11001,
        0b00010,
        0b01010,
    ];
    //display(input[0]);
    //println!("{}", check_power_consumption(input));
    println!("{:016b}", weird[3]);
    println!("{}", part_two(&input));
}

fn part_two(inputs: &Vec<u16>) -> u32 {
    println!("starting o2 scan");
    let o2 = oxygen_value(inputs) as u32;
    println!("starting co2 scan");
    let co2 = co2_value(inputs) as u32;
    o2 * co2
}

fn oxygen_value(inputs: &Vec<u16>) -> u16 {
    let mut winners = inputs.clone();

    while winners.len() > 1 {
        println!("new loop");
        for i in (0..12).rev() {
            println!("{}", winners.len());
            if winners.len() == 1 {
                break
            }
            let mut zeros = Vec::new();
            let mut ones = Vec::new();

            for input in &winners {
                let bit = (input >> i) & 1;
                if bit == 0 {
                    zeros.push(*input);
                } else {
                    ones.push(*input);
                }
            }
           
            if ones.len() >= zeros.len() {
                winners = ones;
            } else {
                winners = zeros;
            }
        }
    }
    //println!("o2 = {}", winners[0]);
    winners[0]
}

fn co2_value(inputs: &Vec<u16>) -> u16 {
    let mut winners = inputs.clone();
    //println!("{:?}", winners);

    while winners.len() > 1 {
        for i in (0..12).rev() {
            if winners.len() == 1 {
                break
            }
            let mut zeros = Vec::new();
            let mut ones = Vec::new();

            for input in &winners {
                let bit = (input >> i) & 1;
                if bit == 0 {
                    zeros.push(*input);
                } else {
                    ones.push(*input);
                }
            }
        //     for i in &zeros {
        //         print!("{:08b}, ", i);
        //     }
        //     println!("<- zeros");

        //     for i in &ones {
        //         print!("{:08b}, ", i);
        //     }
        //    println!("<- ones");
            if zeros.len() <= ones.len() {
                winners = zeros;
            } else {
                winners = ones;
            }
        }
    }
    println!("co2 = {}", winners[0]);
    winners[0]
}


fn check_power_consumption(input: Vec<u16>) -> u32 {
    let mut gamma = 016;
    let mut epsilon = 0u16;

    for i in 0..12 {
        let mut zeros_count = 0;
        let mut ones_count = 0;

        for input in &input {
            let bit = (input >> i) & 1;
            if bit == 0u16 {
                zeros_count += 1;
            } else {
                ones_count += 1;
            }
        }

        gamma = set_bit(gamma, i as u16, find_gamma_rate(zeros_count, ones_count));
        epsilon = set_bit(epsilon, i as u16, find_epsilon_rate(zeros_count, ones_count));
    }
    let gamma = gamma as u32;
    let epsilon = epsilon as u32;
    gamma * epsilon
}

fn find_gamma_rate(zeros: u16, ones: u16) -> u16 {
    if zeros > ones {
        0
    } else {
        1
    }
}

fn find_epsilon_rate(zeros: u16, ones: u16) -> u16 {
    if zeros < ones {
        0
    } else {
        1
    }
}

fn set_bit(mut byte: u16, bit_position: u16, bit_value: u16) -> u16 {
    byte &= !(1u16 << bit_position);
    byte | bit_value << bit_position
}

fn display(v: u16) {
    println!("{:016b}", v);
}
